/*
	Generated by cppsrc.sh
	On 2014-06-17 21:43:15,86
	by Paweu
*/

#include "../../Simulation.h"
#include <algorithm>

namespace nSimulation {

CellVector::CellVector(const SimulationParameters *sp): m_sp(sp) {
}

template <class T>
std::function<bool(const CellVecPair&, const CellVecPair&)> CreateSortFun(unsigned &offset) {
	return [offset] (const CellVecPair &c1, const CellVecPair &c2) -> bool {
		return c1.first->GetValue<T>(offset) < c2.first->GetValue<T>(offset);
	};
}

void CellVector::SortParameter(const char* Parameter, bool Reverse) {
	auto param = m_sp->GetParameter(Parameter);
	if(!param) throw std::runtime_error(string("Unknown parameter: ") + Parameter);

	unsigned offset = param->GetByteOffset()+1;
	std::function<bool(const CellVecPair&, const CellVecPair&)> fun;
	switch(param->GetType()) {
	case ParameterType::Byte:
		fun = CreateSortFun<LuaTypes::Byte>(offset);
		break;
	case ParameterType::Int:
		fun = CreateSortFun<LuaTypes::Int>(offset);
		break;
	case ParameterType::Float:
		fun = CreateSortFun<LuaTypes::Float>(offset);
		break;
	default:
		return;
	}
	if(Reverse)
		std::sort(rbegin(), rend(), fun);
	else
		std::sort(begin(), end(), fun);
}

} //namespace Simulation 

